package models

import (
	"github.com/jinzhu/gorm"
	"github.com/samueldaviddelacruz/go-job-board/API/hash"
	"golang.org/x/crypto/bcrypt"
	"regexp"
	"strings"
	"time"
)

type CompanyBenefit struct {
	gorm.Model
	CompanyProfileID uint
	BenefitName      string `json:"benefitName,omitempty"`
}

type CompanyProfile struct {
	UserID uint
	gorm.Model
	Website         string           `json:"website,omitempty"`
	FoundedYear     uint             `json:"foundedYear,omitempty"`
	Description     string           `json:"description,omitempty"`
	CompanyBenefits []CompanyBenefit `json:"companyBenefits,omitempty"`
	CompanyLogoUrl  string           `json:"companyLogoUrl,omitempty"`
	Skills          []Skill          `gorm:"many2many:companyProfile_skills;" json:"skills,omitempty"`
}

// UserRole represents the user Role
type Role struct {
	gorm.Model
	RoleName string
}

// User represents the User model stored in the database
type User struct {
	gorm.Model
	Email          string          `gorm:"not null;unique_index" json:"email"`
	PasswordHash   string          `gorm:"not null" json:"-"`
	Password       string          `json:"-"`
	Role           *Role           `json:"-"`
	RoleID         uint            `json:"roleId,omitempty"`
	JobPosts       []JobPost       `json:"jobPosts,omitempty"`
	CompanyProfile *CompanyProfile `json:"companyProfile,omitempty"`
}

// UserDB is used to interact with the users database.
//
// For pretty much all single user queries:
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// For single user queries, any error but ErrNotFound should
// probably result in a 500 error.
type UserDB interface {
	// Methods for querying single users
	ByID(id uint) (*User, error)
	ByEmail(email string) (*User, error)
	ByRemember(token string) (*User, error)

	// Methods for altering users
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error
	AddCompanyProfileBenefit(companyProfile *CompanyProfile, benefit CompanyBenefit) error
	RemoveCompanyProfileBenefit(companyProfile *CompanyProfile, benefit CompanyBenefit) error
	UpdateCompanyProfileBenefit(benefit *CompanyBenefit) error
}

// UserService is a set of methods used to manipulate and work
// with the user model
type UserService interface {
	AuthService
	UserDB
}

type AuthService interface {
	// Authenticate will verify if the provided email address and
	// password are correct. if they are correct, the user
	// corresponding to that e  mail will be returned. Otherwise
	// you will receive either:
	// ErrNotFound, ErrPasswordIncorrect, or another error if
	// something goes wrong.
	Authenticate(email, password string) (*User, error)

	// InitiateReset will start the reset password process
	// by creating a reset token for the user found with the
	// provided email address.
	InitiateReset(email string) (string, error)
	CompleteReset(token, newPw string) (*User, error)
}
type authService struct {
	UserDB
	pepper    string
	pwResetDB pwResetDB
}

var _ AuthService = &authService{}

// Authenticate can be used to authenticate a user with the
// provided email address and password.
// If the email provided is invalid, this will return
// nil, ErrNotFound
// if the password provided is invalid, this will return
// nil, ErrPasswordIncorrect
// If the email and password are both valid, this will return
// user,nil
// Otherwise if another error is encountered this will return
// nil,error
func (as *authService) Authenticate(email, password string) (*User, error) {
	foundUser, err := as.ByEmail(email)
	if err != nil {
		return nil, err
	}
	err = bcrypt.CompareHashAndPassword([]byte(foundUser.PasswordHash), []byte(password+as.pepper))
	if err != nil {
		switch err {
		case bcrypt.ErrMismatchedHashAndPassword:
			return nil, ErrPasswordIncorrect
		default:
			return nil, err
		}
	}

	return foundUser, nil
}

func (as *authService) InitiateReset(email string) (string, error) {
	user, err := as.ByEmail(email)
	if err != nil {
		return "", err
	}

	pwr := pwReset{
		UserID: user.ID,
	}
	if err := as.pwResetDB.Create(&pwr); err != nil {
		return "", err
	}
	return pwr.Token, nil
}
func (as *authService) CompleteReset(token, newPw string) (*User, error) {
	pwr, err := as.pwResetDB.ByToken(token)
	if err != nil {
		if err == ErrNotFound {
			return nil, ErrPwResetInvalid
		}

		return nil, err
	}

	if time.Now().Sub(pwr.CreatedAt) > (12 * time.Hour) {
		return nil, ErrPwResetInvalid
	}

	user, err := as.ByID(pwr.UserID)

	if err != nil {
		return nil, err
	}
	user.Password = newPw
	err = as.Update(user)
	if err != nil {
		return nil, err
	}

	as.pwResetDB.Delete(pwr.ID)

	return user, nil
}

func NewUserService(db *gorm.DB, pepper, hmacKey string) UserService {
	ug := &userGorm{db}

	hmac := hash.NewHMAC(hmacKey)
	uv := newUserValidator(ug, hmac, pepper)
	as := &authService{
		UserDB:    ug,
		pepper:    pepper,
		pwResetDB: newPwResetValidator(&pwResetGorm{db}, hmac),
	}
	return &userService{
		UserDB:      uv,
		AuthService: as,
	}
}

var _ UserService = &userService{}

type userService struct {
	UserDB
	AuthService
}

type userValFunc func(*User) error

func runUserValFuncs(user *User, fns ...userValFunc) error {
	for _, fn := range fns {
		if err := fn(user); err != nil {
			return err
		}
	}

	return nil
}

var _ UserDB = &userValidator{}

func newUserValidator(udb UserDB, hmac hash.HMAC, pepper string) *userValidator {
	return &userValidator{
		UserDB:     udb,
		hmac:       hmac,
		emailRegex: regexp.MustCompile(`^[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,16}$`),
		pepper:     pepper,
	}
}

type userValidator struct {
	UserDB
	hmac hash.HMAC
	// emailRegex is used to match email addresses. Its not
	// perfect but works well enough for now :).
	emailRegex *regexp.Regexp
	pepper     string
}

// ByEmail will normalize the email address before calling
// ByEmail on the UserDB field.
func (uv *userValidator) ByEmail(email string) (*User, error) {
	user := User{
		Email: email,
	}
	if err := runUserValFuncs(&user, uv.normalizeEmail); err != nil {
		return nil, err
	}

	return uv.UserDB.ByEmail(user.Email)
}

// Create will create the provided user and backfill data
// like the ID, CreatedAt, and UpdatedAt fields.
func (uv *userValidator) Create(user *User) error {
	err := runUserValFuncs(
		user,
		uv.passwordRequired,
		uv.passwordMinLength,
		uv.bcryptPassword,
		uv.passwordHashRequired,

		uv.normalizeEmail,
		uv.requireEmail,
		uv.emailFormat,
		uv.emailIsAvail)
	if err != nil {
		return err
	}

	return uv.UserDB.Create(user)
}

// Update will hash a remember token if it is provided.
func (uv *userValidator) Update(user *User) error {
	err := runUserValFuncs(user,
		uv.passwordMinLength,
		uv.bcryptPassword,
		uv.passwordHashRequired,
		uv.normalizeEmail,
		uv.requireEmail,
		uv.emailFormat,
		uv.emailIsAvail)
	if err != nil {
		return err
	}
	return uv.UserDB.Update(user)
}

// Delete will delete the user with the provided ID
func (uv *userValidator) Delete(id uint) error {
	var user User
	user.ID = id
	if err := runUserValFuncs(&user, uv.idGreaterThan(0)); err != nil {
		return err
	}
	return uv.UserDB.Delete(id)
}

func (uv *userValidator) AddCompanyProfileBenefit(companyProfile *CompanyProfile, benefit CompanyBenefit) error {
	if companyProfile == nil {
		return ErrCompanyProfileRequired
	}
	if benefit.BenefitName == "" {
		return ErrBenefitNameRequired
	}
	return uv.UserDB.AddCompanyProfileBenefit(companyProfile, benefit)
}

func (uv *userValidator) RemoveCompanyProfileBenefit(companyProfile *CompanyProfile, benefit CompanyBenefit) error {
	if companyProfile == nil {
		return ErrCompanyProfileRequired
	}

	if benefit.BenefitName == "" {
		return ErrBenefitNameRequired
	}

	return uv.UserDB.RemoveCompanyProfileBenefit(companyProfile, benefit)
}
func (uv *userValidator) UpdateCompanyProfileBenefit(benefit *CompanyBenefit) error {
	if benefit == nil {
		return ErrCompanyBenefitRequired
	}

	if benefit.ID <= 0 {
		return ErrIDInvalid
	}

	if benefit.BenefitName == "" {
		return ErrBenefitNameRequired
	}

	return uv.UserDB.UpdateCompanyProfileBenefit(benefit)
}

// bcryptPassword will hash a user's password with a
// predefined pepper (userPwPepper) and bcrypt if the
// Password field is not an empty string
func (uv *userValidator) bcryptPassword(user *User) error {
	if user.Password == "" {
		return nil
	}
	pwBytes := []byte(user.Password + uv.pepper)
	hashedBytes, err := bcrypt.GenerateFromPassword(pwBytes, bcrypt.DefaultCost)
	if err != nil {
		return err
	}
	user.PasswordHash = string(hashedBytes)
	user.Password = ""

	return nil
}

func (uv *userValidator) idGreaterThan(value uint) userValFunc {
	return func(user *User) error {
		if user.ID <= value {
			return ErrIDInvalid
		}
		return nil
	}
}

func (uv *userValidator) normalizeEmail(user *User) error {
	user.Email = strings.ToLower(user.Email)
	user.Email = strings.TrimSpace(user.Email)
	return nil
}

func (uv *userValidator) requireEmail(user *User) error {
	if user.Email == "" {
		return ErrEmailRequired
	}
	return nil
}

func (uv *userValidator) emailFormat(user *User) error {
	if !uv.emailRegex.MatchString(user.Email) {
		return ErrEmailInvalid
	}
	return nil
}

func (uv *userValidator) emailIsAvail(user *User) error {
	existing, err := uv.ByEmail(user.Email)
	if err == ErrNotFound {
		// Email address is not taken
		return nil
	}

	if err != nil {
		return err
	}
	// We found a user w/ this email address...
	// If the found user has the same ID as this user, it is
	// an update and this is the same user.
	if user.ID != existing.ID {
		return ErrEmailTaken
	}
	return nil
}

func (uv *userValidator) passwordMinLength(user *User) error {
	if user.Password == "" {
		return nil
	}
	if len(user.Password) < 8 {
		return ErrPasswordTooShort
	}

	return nil
}

func (uv *userValidator) passwordRequired(user *User) error {
	if user.Password == "" {
		return ErrPasswordRequired
	}

	return nil
}

func (uv *userValidator) passwordHashRequired(user *User) error {
	if user.PasswordHash == "" {
		return ErrPasswordRequired
	}

	return nil
}

var _ UserDB = &userGorm{}

type userGorm struct {
	db *gorm.DB
}

// ByID will look up a user with the provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (ug *userGorm) ByID(id uint) (*User, error) {
	var user User

	db := ug.db.Where("id = ?", id)

	err := first(db.Set("gorm:auto_preload", true), &user)

	return &user, err

}

// ByEmail looks up a user with a given email address and
// returns that user.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (ug *userGorm) ByEmail(email string) (*User, error) {
	var user User
	db := ug.db.Where("email = ?", email)
	err := first(db, &user)

	return &user, err
}

// ByRemember looks up a user with the given remember token
// and returns that user, This method expects the remember
// token to already be hashed.
// Errors are the same as ByEmail
func (ug *userGorm) ByRemember(rememberHash string) (*User, error) {
	var user User

	db := ug.db.Where("remember_hash = ?", rememberHash)
	err := first(db, &user)

	return &user, err
}

// Create will create the provided user and backfill data
// like the ID, CreatedAt, and UpdatedAt fields.
func (ug *userGorm) Create(user *User) error {
	return ug.db.Create(user).Error
}

// Update will update the provided user with all of the data
// in the provided the user object.
func (ug *userGorm) Update(user *User) error {
	return ug.db.Set("gorm:association_autoupdate", false).Save(user).Error
}

// Delete will delete the user with the provided ID
func (ug *userGorm) Delete(id uint) error {
	user := User{Model: gorm.Model{ID: id}}
	return ug.db.Delete(&user).Error
}

func (ug *userGorm) AddCompanyProfileBenefit(profile *CompanyProfile, benefit CompanyBenefit) error {
	return ug.db.Model(profile).Association("CompanyBenefits").Append(benefit).Error
}

func (ug *userGorm) RemoveCompanyProfileBenefit(profile *CompanyProfile, benefit CompanyBenefit) error {
	return ug.db.Model(profile).Association("CompanyBenefits").Delete(benefit).Error
}

func (ug *userGorm) UpdateCompanyProfileBenefit(benefit *CompanyBenefit) error {
	return ug.db.Save(benefit).Error
}

// first will query using the provided gorm.DB and it will
// get the first item returned and place it into dst(if dst is a pointer). If
// nothing is found in the query, it will return ErrNotFound
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}
